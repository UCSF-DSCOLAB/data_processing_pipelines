nextflow_pipeline {

    name "Test Workflow pipeline_pre_qc.nf"
    script "pipeline_pre_qc.nf"
    tag "qc-quantiles"


    def c4PathToTestFiles = "/krummellab/data1/integration_test_user/tutorial_lib_sep"

    // Assertion directories


    stage {
        copy c4PathToTestFiles
    }

    test("Pre-qc: freemuxlet and doubletfinder") {

        def metaDir = "$metaDir"
        def testDirAbsolute = metaDir + c4PathToTestFiles
        def freemuxDir = testDirAbsolute + "/freemuxlet_data"
        def demuxMethod = "freemuxlet"
        
        def finding_doublets = "/finding_doublets"
        def automated_processing = "/automated_processing"
        def demux_dir = "/freemuxlet"
        def test_directories = [finding_doublets, automated_processing, demux_dir]

        when {
            params {
                    load("./tests/inputs/pre_qc.json")
                    project_dir = testDirAbsolute
                    settings = {
                        skip_cellranger = true
                        merge_for_demux = true
                        merge_demux_dir = freemuxDir
                        demux_method = demuxMethod
                        default_qc_cuts_dir = testDirAbsolute
                        default_qc_cuts_file = "default_qc_cuts.csv"
                    }
            }
        }

        then {
            // Setup assertion directories
            def dm1_scg1 = testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG1"
            def dm1_scg2 = testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG2"
            def dm2_scg1 = testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM2-SCG1"
            def test_sample_paths = [dm1_scg1, dm1_scg2, dm2_scg1]
            def resultFilesList = []
            for (sample in test_sample_paths) {
                for (test_dir in test_directories) {
                    def dir_to_test = sample + test_dir
                    def dirFile = new File(dir_to_test)
                    def resultFiles = dirFile.listFiles().collect { it.name }
                    resultFilesList.addAll(resultFiles)
                    println "Processing: ${resultFilesList}"
                }
            }
            // Filter out the .pdf files
            def filteredPaths = resultFilesList.findAll { filePath ->
                     !filePath.endsWith('.pdf')
            }
            def sorted = filteredPaths.sort()
            assert snapshot(workflow, sorted).match()
        }
    }

    test("Pre-qc: demuxlet and doubletfinder") {

        def metaDir = "$metaDir"
        def testDirAbsolute = metaDir + c4PathToTestFiles
        def freemuxDir = testDirAbsolute + "/freemuxlet_data"
        def demuxMethod = "demuxlet"

        def finding_doublets = "/finding_doublets_dmx"
        def automated_processing = "/automated_processing_dmx"
        def demux_dir = "/demuxlet"
        def test_directories = [finding_doublets, automated_processing, demux_dir]
        
        when {
            params {
                    load("./tests/inputs/pre_qc.json")
                    project_dir = testDirAbsolute
                    settings = {
                        skip_cellranger = true
                        merge_for_demux = true
                        merge_demux_dir = freemuxDir
                        demux_method = demuxMethod
                        default_qc_cuts_dir = testDirAbsolute
                        default_qc_cuts_file = "default_qc_cuts.csv"
                    }
            }
        }

        then {
            // Setup assertion directories
            def dm1_scg1 = testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG1"
            def dm1_scg2 = testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG2"
            def dm2_scg1 = testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM2-SCG1"
            def test_sample_paths = [dm1_scg1, dm1_scg2, dm2_scg1]
            def resultFilesList = []
            for (sample in test_sample_paths) {
                for (test_dir in test_directories) {
                    def dir_to_test = sample + test_dir
                    def dirFile = new File(dir_to_test)
                    def resultFiles = dirFile.listFiles().collect { it.name }
                    resultFilesList.addAll(resultFiles)
                }
            }
            // Filter out the .pdf files
            def filteredPaths = resultFilesList.findAll { filePath ->
                     !filePath.endsWith('.pdf')
            }
            def sorted = filteredPaths.sort()
            assert snapshot(workflow, sorted).match()
        }
    }

}

