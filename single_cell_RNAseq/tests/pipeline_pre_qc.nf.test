nextflow_pipeline {

    name "Test Workflow pipeline_pre_qc.nf"
    script "pipeline_pre_qc.nf"
    tag "qc-quantiles"

    def c4PathToTestFiles = "/krummellab/data1/integration_test_user/tutorial_lib_sep"

    stage {
        copy c4PathToTestFiles
    }

    test("Should successfully demultiplex merged libaries using freemuxlet and run doublet finder") {

        def meta = "$metaDir"
        def testDirAbsolute = meta + c4PathToTestFiles
        def freemuxDir = testDirAbsolute + "/freemuxlet_data"

        when {
            params {
                    load("./tests/inputs/pre_qc.json")
                    project_dir = testDirAbsolute
                    settings = {
                        add_tcr = false
                        add_bcr = false
                        skip_cellranger = true
                        merge_for_demux = true
                        merge_demux_dir = freemuxDir
                        demux_method = "freemuxlet"
                        run_doubletfinder = true
                        mincell = 3
                        minfeature = 100
                        default_qc_cuts_dir = testDirAbsolute
                        default_qc_cuts_file = "default_qc_cuts.csv"
                        randomseed = 21212
                        remove_demux_DBL = true
                        remove_all_DBL = true
                    }
                }
            }

        then {
            assert snapshot(
                    workflow,
                    path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG1/automated_processing/TEST-POOL-DM1-SCG1_quantiles_pre.tsv"),
                    path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG2/automated_processing/TEST-POOL-DM1-SCG2_quantiles_pre.tsv"),
                    path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM2-SCG1/automated_processing/TEST-POOL-DM2-SCG1_quantiles_pre.tsv"),
                ).match()
            }
        }


    test("Should successfully demultiplex merged libraries using freemuxlet") {

        def meta = "$metaDir"
        def testDirAbsolute = meta + c4PathToTestFiles
        def freemuxDir = testDirAbsolute + "/freemuxlet_data"

        when {
            params {
                load("./tests/inputs/pre_qc.json")
                project_dir = testDirAbsolute
                settings = {
                    add_tcr = false
                    add_bcr = false
                    skip_cellranger = true
                    merge_for_demux = true
                    merge_demux_dir = freemuxDir
                    demux_method = "freemuxlet"
                    run_doubletfinder = false
                    mincell = 3
                    minfeature = 100
                    default_qc_cuts_dir = testDirAbsolute
                    default_qc_cuts_file = "default_qc_cuts.csv"
                    randomseed = 21212
                    remove_demux_DBL = true
                    remove_all_DBL = true
                }
            }
        }

         then {
             assert snapshot(
                 workflow,
                 path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG1/automated_processing/TEST-POOL-DM1-SCG1_quantiles_pre.tsv"),
                 path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG2/automated_processing/TEST-POOL-DM1-SCG2_quantiles_pre.tsv"),
                 path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM2-SCG1/automated_processing/TEST-POOL-DM2-SCG1_quantiles_pre.tsv"),
             ).match()
         }

    }

     test("Should successfully demultiplex individual libraries using freemuxlet and run doublet finder") {

        def meta = "$metaDir"
        def testDirAbsolute = meta + c4PathToTestFiles
        def freemuxDir = testDirAbsolute + "/freemuxlet_data"

        when {
            params {
                load("./tests/inputs/pre_qc.json")
                project_dir = testDirAbsolute
                settings = {
                        add_tcr = false
                        add_bcr = false
                        skip_cellranger = true
                        merge_for_demux = false
                        merge_demux_dir = freemuxDir
                        demux_method = "freemuxlet"
                        run_doubletfinder = true
                        mincell = 3
                        minfeature = 100
                        default_qc_cuts_dir = testDirAbsolute
                        default_qc_cuts_file = "default_qc_cuts.csv"
                        randomseed = 21212
                        remove_demux_DBL = true
                        remove_all_DBL = true
                    }
                }
            }

        then {
            assert snapshot(
                     workflow,
                     path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG1/automated_processing/TEST-POOL-DM1-SCG1_quantiles_pre.tsv"),
                     path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG2/automated_processing/TEST-POOL-DM1-SCG2_quantiles_pre.tsv"),
                     path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM2-SCG1/automated_processing/TEST-POOL-DM2-SCG1_quantiles_pre.tsv"),
                 ).match()
             }

        }


    test("Should successfully demultiplex individual libraries using freemuxlet ") {

        def meta = "$metaDir"
        def testDirAbsolute = meta + c4PathToTestFiles
        def freemuxDir = testDirAbsolute + "/freemuxlet_data"

        when {
            params {
                load("./tests/inputs/pre_qc.json")
                project_dir = testDirAbsolute
                settings = {
                        add_tcr = false
                        add_bcr = false
                        skip_cellranger = true
                        merge_for_demux = false
                        merge_demux_dir = freemuxDir
                        demux_method = "freemuxlet"
                        run_doubletfinder = false
                        mincell = 3
                        minfeature = 100
                        default_qc_cuts_dir = testDirAbsolute
                        default_qc_cuts_file = "default_qc_cuts.csv"
                        randomseed = 21212
                        remove_demux_DBL = true
                        remove_all_DBL = true
                    }
                }
            }

        then {
            assert snapshot(
                     workflow,
                     path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG1/automated_processing/TEST-POOL-DM1-SCG1_quantiles_pre.tsv"),
                     path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG2/automated_processing/TEST-POOL-DM1-SCG2_quantiles_pre.tsv"),
                     path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM2-SCG1/automated_processing/TEST-POOL-DM2-SCG1_quantiles_pre.tsv"),
                 ).match()
             }

        }

    test("Should successfully demultiplex merged libraries using demuxlet and run doublet finder") {

        def meta = "$metaDir"
        def testDirAbsolute = meta + c4PathToTestFiles
        def freemuxDir = testDirAbsolute + "/freemuxlet_data"

        when {
            params {
                load("./tests/inputs/pre_qc.json")
                project_dir = testDirAbsolute
                settings = {
                        add_tcr = false
                        add_bcr = false
                        skip_cellranger = true
                        merge_for_demux = true
                        merge_demux_dir = freemuxDir
                        demux_method = "demuxlet"
                        run_doubletfinder = true
                        mincell = 3
                        minfeature = 100
                        default_qc_cuts_dir = testDirAbsolute
                        default_qc_cuts_file = "default_qc_cuts.csv"
                        randomseed = 21212
                        remove_demux_DBL = true
                        remove_all_DBL = true
                    }
                }
            }

        then {
            assert snapshot(
                workflow,
                    path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG1/automated_processing/TEST-POOL-DM1-SCG1_quantiles_pre.tsv"),
                    path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG2/automated_processing/TEST-POOL-DM1-SCG2_quantiles_pre.tsv"),
                    path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM2-SCG1/automated_processing/TEST-POOL-DM2-SCG1_quantiles_pre.tsv"),
                ).match()
            }
        }
/*
    test("Should successfully demultiplex merged libraries using freemuxlet") {

        def meta = "$metaDir"
        def testDirAbsolute = meta + c4PathToTestFiles
        def freemuxDir = testDirAbsolute + "/freemuxlet_data"

        when {
            params {
                load("./tests/inputs/pre_qc.json")
                project_dir = testDirAbsolute
                settings = {
                        add_tcr = false
                        add_bcr = false
                        skip_cellranger = true
                        merge_for_demux = true
                        merge_demux_dir = freemuxDir
                        demux_method = "demuxlet"
                        run_doubletfinder = false
                        mincell = 3
                        minfeature = 100
                        default_qc_cuts_dir = testDirAbsolute
                        default_qc_cuts_file = "default_qc_cuts.csv"
                        randomseed = 21212
                        remove_demux_DBL = true
                        remove_all_DBL = true
                    }
                }
            }

        then {
            assert snapshot(
                workflow,
                     path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG1/automated_processing/TEST-POOL-DM1-SCG1_quantiles_pre.tsv"),
                     path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG2/automated_processing/TEST-POOL-DM1-SCG2_quantiles_pre.tsv"),
                     path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM2-SCG1/automated_processing/TEST-POOL-DM2-SCG1_quantiles_pre.tsv"),
                 ).match()
             }

        }
*/
    test("Should successfully demultiplex individual libraries using demuxlet and run doublet finder") {

        def meta = "$metaDir"
        def testDirAbsolute = meta + c4PathToTestFiles
        def freemuxDir = testDirAbsolute + "/freemuxlet_data"

        when {
            params {
                load("./tests/inputs/pre_qc.json")
                project_dir = testDirAbsolute
                settings = {
                            add_tcr = false
                            add_bcr = false
                            skip_cellranger = true
                            merge_for_demux = false
                            merge_demux_dir = freemuxDir
                            demux_method = "demuxlet"
                            run_doubletfinder = true
                            mincell = 3
                            minfeature = 100
                            default_qc_cuts_dir = testDirAbsolute
                            default_qc_cuts_file = "default_qc_cuts.csv"
                            randomseed = 21212
                            remove_demux_DBL = true
                            remove_all_DBL = true
                }
            }
        }

        then {
            assert snapshot(
                         workflow,
                         path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG1/automated_processing/TEST-POOL-DM1-SCG1_quantiles_pre.tsv"),
                         path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG2/automated_processing/TEST-POOL-DM1-SCG2_quantiles_pre.tsv"),
                         path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM2-SCG1/automated_processing/TEST-POOL-DM2-SCG1_quantiles_pre.tsv"),
                     ).match()
                 }

        }


    test("Should successfully demultiplex individual libraries using demuxlet") {

        def meta = "$metaDir"
        def testDirAbsolute = meta + c4PathToTestFiles
        def freemuxDir = testDirAbsolute + "/freemuxlet_data"

        when {
            params {
                load("./tests/inputs/pre_qc.json")
                project_dir = testDirAbsolute
                    settings = {
                            add_tcr = false
                            add_bcr = false
                            skip_cellranger = true
                            merge_for_demux = false
                            merge_demux_dir = freemuxDir
                            demux_method = "freemuxlet"
                            run_doubletfinder = false
                            mincell = 3
                            minfeature = 100
                            default_qc_cuts_dir = testDirAbsolute
                            default_qc_cuts_file = "default_qc_cuts.csv"
                            randomseed = 21212
                            remove_demux_DBL = true
                            remove_all_DBL = true
                }
            }
        }

        then {
            assert snapshot(
                workflow,
                    path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG1/automated_processing/TEST-POOL-DM1-SCG1_quantiles_pre.tsv"),
                    path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM1-SCG2/automated_processing/TEST-POOL-DM1-SCG2_quantiles_pre.tsv"),
                    path(testDirAbsolute + "/data/single_cell_GEX/processed/TEST-POOL-DM2-SCG1/automated_processing/TEST-POOL-DM2-SCG1_quantiles_pre.tsv"),
                     ).match()
                }

        }

}